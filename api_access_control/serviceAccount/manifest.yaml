---
apiVersion: v1
kind: Namespace
metadata:
  name: test
spec:
---
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: test-service-account
  namespace: test
  labels:
    app.kubernetes.io/name: test-service
    app.kubernetes.io/component: serviceaccount
    app.kubernetes.io/part-of: testing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: test-service-account
  namespace: test
  labels:
    app.kubernetes.io/name: test-role
    app.kubernetes.io/component: role
    app.kubernetes.io/part-of: testing
rules:
- apiGroups: ['']
  resources: ['pods', 'services']
  verbs: ['get', 'list', 'watch']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: test-service-account
  namespace: test
  labels:
    app.kubernetes.io/name: test-role-binding
    app.kubernetes.io/component: rolebinding
    app.kubernetes.io/part-of: testing
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: test-service-account
subjects:
- name: test-service-account
  namespace: test
  kind: ServiceAccount
---
apiVersion: v1
kind: Pod
metadata:
  name: simple-client
  namespace: test
  labels:
    app.kubernetes.io/name: client
    app.kubernetes.io/component: serviceaccount
    app.kubernetes.io/part-of: testing
spec:
  serviceAccountName: test-service-account
  automountServiceAccountToken: true
  containers:
  - name: client
    image: alpine:3.16
    imagePullPolicy: IfNotPresent
    command: ['/bin/sh']
    args: ['-c', 'apk add curl; base=/var/run/secrets/kubernetes.io/serviceaccount; curl $API_SERVER/api/v1/namespaces/$(cat ${base}/namespace)/pods -sSLk -H "Authorization: Bearer $(cat ${base}/token)"; unset base']